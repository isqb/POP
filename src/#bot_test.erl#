-module(bot_test).
%% -include_lib("eunit/include/eunit.hrl").
%% % 14.06 sadasdasasd

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%			   EUnit Test Cases                                  %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% %% All functions with names ending wiht _test() or _test_() will be
%% %% called automatically by make test

%borttest(Main) ->
  % timer:sleep(10000),
 %  Main ! abort.

init_test() ->
    Main = self(),
    InitPID = spawn(fun() -> bot:initbot(Main) end), %%Spawn a bot for testing
  % AbortPID = spawn(fun() -> aborttest(Main) end), %%Spawn a process to abort this test and fail after timeout
    receive
	{register, _PID,_Coordinates} ->
	    Success = true
%	abort ->
%	    Success = false
    end,
    exit(InitPID,normal),
  % exit(AbortPID,normal),
    ?assertEqual(true,Success).

looptest() ->
    Main = self(),
    %AbortPID = spawn(fun() -> aborttest(Main) end), %%Spawn a process to abort this test and fail after timeout
    LoopPID = spawn(fun() -> bot:initbot(Main) end), %%Spawn a botloop process for testing
    LoopPID ! {newposition, {10,1}},
    timer:sleep(100),
    receive 
	{walk, LoopPID, Direction1, Coordinates1} ->
	    io:format("First walk: ~p~n",[Coordinates1]),
	    Result1 = Coordinates1	
%	abort ->
	   % Result1 = {0,0}
    end,
    receive 
	{walk, LoopPID, Direction2, Coordinates2} ->
	    io:format("Second walk: ~p~n",[Coordinates2]),
	    Result2 = Coordinates2
%	abort ->
	   % Result2 = {0,0}
    end,
    io:format("~n~n RESULT = ~p ~n ~n",[Result2]),
    exit(LoopPID,normal),
%   exit(AbortPID,normal),
    {Result1,Result2}.

loop_test()->
    Result = looptest(),
    io:format("RESULT FROM LOOPTEST: ~p~n",[Result]),
    ?assertEqual({{10,0},{10,1}},Result).
    
    
